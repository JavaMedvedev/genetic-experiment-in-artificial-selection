/* Sergey Medvedev https://github.com/JavaMedvedev */

package roseEvolution;

import java.util.List;

public class Application {

    /*
    The Application is an approximated simulation of a Mendel's genetic experiment of selective breeding.
    The premise is that we have a garden of roses which can be red, pink or white
    depending on the values of the pair of alleles each of them has (since both red and white alleles are dominant for roses,
    if an object of Rose class has a red and a white alleles, it gives the rose the pink colour).
    The goal of the experiment is to see how many generations of roses it would take
    to make the per cent of white roses below or equal to the acceptance rate we specify for the experiment
    as one of the parameters of the respective method.
    In the experiment, we:
    1. generate a specified number of Rose objects of random colours,
    i.e. each rose has a pair of randomly selected alleles as the values of its List<Allele> property;
    2. discard white roses, i.e. those whose pair of alleles has only white values;
    3. mate the rest of the roses picking alleles for child roses from parent roses' pairs of alleles randomly.
    In doing so, we instantiate a new generation of roses;
    4. check if the per cent of white roses in the new generation is below or equal to the acceptance rate.
    If it is higher, the cycle repeats itself, i.e. white roses get discarded and the rest get mated
    until the result satisfies the main requirement of the experiment.
    The Application class has main method.
    The method calls roseListBuilder method of RoseListBuilder class to generate the list of Rose objects.
    Then the method calls iterator method of Iterator class which accepts the list generated by roseListBuilder method as its actual parameter
    and invokes a chain of methods to simulate the process of artificial selection of roses from the list.
     */

    public static void main (String[] args){

        List<Rose> list = RoseListBuilder.roseListBuilder(1000);

        System.out.println("Generation 1: " + list);
        System.out.println("Red and pink roses: " + (Stats.pinkCount(list) + Stats.redCount(list)));
        System.out.println("White roses: " + Stats.whiteCount(list));

        Iterator.iterator(list, 1);

    }
}
